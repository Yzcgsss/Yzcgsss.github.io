<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>念你</title>
  
  <subtitle>心中有海，不赶浪潮</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yzcgsss.github.io/"/>
  <updated>2020-01-16T04:26:37.205Z</updated>
  <id>https://yzcgsss.github.io/</id>
  
  <author>
    <name>念你</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>filename</title>
    <link href="https://yzcgsss.github.io/2020/01/16/filename/"/>
    <id>https://yzcgsss.github.io/2020/01/16/filename/</id>
    <published>2020-01-16T04:08:34.000Z</published>
    <updated>2020-01-16T04:26:37.205Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/.io//1.jsp" alt><br>插入图片</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>这一篇让你彻底搞懂Java内部类</title>
    <link href="https://yzcgsss.github.io/2020/01/16/java%E5%9F%BA%E7%A1%80/"/>
    <id>https://yzcgsss.github.io/2020/01/16/java%E5%9F%BA%E7%A1%80/</id>
    <published>2020-01-16T04:01:03.476Z</published>
    <updated>2020-01-16T04:11:28.806Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文将会从以下几部分来总结：</strong>   </p><ol><li><p>为什么要存在内部类</p></li><li><p>内部类与外部类的关系</p></li><li><p>内部的分类及几种分类的详细使用注意事项</p></li><li><p>实际开发中会遇到内部类的问题</p></li></ol><a id="more"></a><p><img src="/.io//biubiubiu.gif" alt><br>插入图片</p><h2 id="内部类为什么存在"><a href="#内部类为什么存在" class="headerlink" title="内部类为什么存在"></a>内部类为什么存在</h2><blockquote><p>内部类(inner class)：定义在另一个类中的类   </p></blockquote><p><strong>我们为什么需要内部类？或者说内部类为啥要存在？其主要原因有如下几点：</strong></p><p>内部类方法可以访问该类定义所在作用域中的数据，包括被 private 修饰的私有数据</p><p>内部类可以对同一包中的其他类隐藏起来</p><p>内部类可以实现 java 单继承的缺陷</p><p>当我们想要定义一个回调函数却不想写大量代码的时候我们可以选择使用匿名内部类来实现</p><h2 id="内部类方法可以访问该类定义所在作用域中的数据"><a href="#内部类方法可以访问该类定义所在作用域中的数据" class="headerlink" title="内部类方法可以访问该类定义所在作用域中的数据"></a>内部类方法可以访问该类定义所在作用域中的数据</h2><p>做 Android 的话有时候会将各种 Adapter 直接写在 Activity 中，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class MainActivity extends AppCompatActivity&#123;</span><br><span class="line">    ....</span><br><span class="line">    private List&lt;Fragment&gt; fragments = new ArrayList();</span><br><span class="line"></span><br><span class="line">    private class BottomPagerAdapter extends FragmentPagerAdapter&#123;</span><br><span class="line">        ....</span><br><span class="line">        @Override  </span><br><span class="line">        public Fragment getItem(int position) &#123;</span><br><span class="line">            <span class="built_in">return</span> fragments.get(position);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文中 BottomPagerAdapter 便是 MainActivity 的一个内部类。也可以看出 BottomPagerAdapter 可以直接访问 MainActivity 中定义的 fragments 私有变量。如果将 BottomPagerAdapter 不定义为内部类访问 fragments 私有变量 没有 getXXX 方法是做不到的。这就是内部类的第一点好处。</p><p><strong>可是为什么内部类就可以随意访问外部类的成员呢？是如何做到的呢？</strong></p><p>当外部类的对象创建了一个内部类的对象时，内部类对象必定会秘密捕获一个指向外部类对象的引用，然后访问外部类的成员时，就是用那个引用来选择外围类的成员的。当然这些编辑器已经帮我们处理了。</p><p>另外注意内部类只是一种编译器现象，与虚拟机无关。编译器会将内部类编译成 外部类名$内部类名 的常规文件，虚拟机对此一无所知。</p><h2 id="内部类可以对同一包中的其他类隐藏起来"><a href="#内部类可以对同一包中的其他类隐藏起来" class="headerlink" title="内部类可以对同一包中的其他类隐藏起来"></a>内部类可以对同一包中的其他类隐藏起来</h2><p>关于内部类的第二个好处其实很显而易见，我们都知道外部类即普通的类不能使用 private protected 访问权限符来修饰的，而内部类则可以使用 private 和 protected 来修饰。当我们使用 private 来修饰内部类的时候这个类就对外隐藏了。</p><p>这看起来没什么作用，但是当内部类实现某个接口的时候，在进行向上转型，对外部来说，就完全隐藏了接口的实现了。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public interface Incrementable&#123;</span><br><span class="line">  void increment();</span><br><span class="line">&#125;</span><br><span class="line">//具体类</span><br><span class="line">public class Example &#123;</span><br><span class="line"></span><br><span class="line">    private class InsideClass implements InterfaceTest&#123;</span><br><span class="line">         public void <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">             System.out.println(<span class="string">"这是一个测试"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public InterfaceTest <span class="function"><span class="title">getIn</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> new InsideClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TestExample &#123;</span><br><span class="line"></span><br><span class="line"> public static void main(String args[])&#123;</span><br><span class="line">    Example a=new Example();</span><br><span class="line">    InterfaceTest a1=a.getIn();</span><br><span class="line">    a1.test();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这段代码里面我只知道Example的getIn()方法能返回一个InterfaceTest实例但我并不知道这个实例是这么实现的。而且由于InsideClass是private的，所以我们如果不看代码的话根本看不到这个具体类的名字，所以说它可以很好的实现隐藏。</p><h2 id="内部类可以实现-java-单继承的缺陷"><a href="#内部类可以实现-java-单继承的缺陷" class="headerlink" title="内部类可以实现 java 单继承的缺陷"></a>内部类可以实现 java 单继承的缺陷</h2><p>我们知道 java 是不允许使用 extends 去继承多个类的。内部类的引入可以很好的解决这个事情。</p><p>以下引用 《Thinking In Java》中的一段话：</p><blockquote><p>每个内部类都可以独立的继承自一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类没有影响<br>如果没有内部类提供的、可以继承多个具体的或抽象的类的能力，一些设计与编程问题就难以解决。<br>接口解决了部分问题，一个类可以实现多个接口，内部类允许继承多个非接口类型（类或抽象类）。</p></blockquote><p>我的理解 Java只能继承一个类这个学过基本语法的人都知道，而在有内部类之前它的多重继承方式是用接口来实现的。但使用接口有时候有很多不方便的地方。比如我们实现一个接口就必须实现它里面的所有方法。而有了内部类就不一样了。它可以使我们的类继承多个具体类或抽象类。如下面这个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//类一</span><br><span class="line">public class ClassA &#123;</span><br><span class="line">   public String <span class="function"><span class="title">name</span></span>()&#123;</span><br><span class="line">       <span class="built_in">return</span> <span class="string">"liutao"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   public String <span class="function"><span class="title">doSomeThing</span></span>()&#123;</span><br><span class="line">    // doSomeThing</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">//类二</span><br><span class="line">public class ClassB &#123;</span><br><span class="line">    public int <span class="function"><span class="title">age</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> 25;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//类三</span><br><span class="line">public class MainExample&#123;</span><br><span class="line">   private class Test1 extends ClassA&#123;</span><br><span class="line">        public String <span class="function"><span class="title">name</span></span>()&#123;</span><br><span class="line">          <span class="built_in">return</span> super.name();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private class Test2 extends ClassB&#123;</span><br><span class="line">       public int <span class="function"><span class="title">age</span></span>()&#123;</span><br><span class="line">         <span class="built_in">return</span> super.age();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   public String <span class="function"><span class="title">name</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> new Test1().name();</span><br><span class="line">   &#125;</span><br><span class="line">   public int <span class="function"><span class="title">age</span></span>()&#123;</span><br><span class="line">       <span class="built_in">return</span> new Test2().age();</span><br><span class="line">   &#125;</span><br><span class="line">   public static void main(String args[])&#123;</span><br><span class="line">       MainExample mi=new MainExample();</span><br><span class="line">       System.out.println(<span class="string">"姓名:"</span>+mi.name());</span><br><span class="line">       System.out.println(<span class="string">"年龄:"</span>+mi.age());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边这个例子可以看出来，MainExample 类通过内部类拥有了 ClassA 和 ClassB 的两个类的继承关系。而无需关注 ClassA 中的 doSomeThing 方法的实现。这就是比接口实现更有戏的地方。</p><h2 id="通过匿名内部类来”优化”简单的接口实现"><a href="#通过匿名内部类来”优化”简单的接口实现" class="headerlink" title="通过匿名内部类来”优化”简单的接口实现"></a>通过匿名内部类来”优化”简单的接口实现</h2><p>关于匿名内部类相信大家都不陌生，我们常见的点击事件的写法就是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">   view.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>()&#123;</span><br><span class="line">       @Override</span><br><span class="line">       public void <span class="function"><span class="title">onClick</span></span>()&#123;</span><br><span class="line">           // ... <span class="keyword">do</span> XXX...</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p>为什么标题优化带了””,其实在 Java8 引入 lambda 表达式之前我个人是比较讨厌这种写法的，因为 onClick 方法中的内容可能很复杂，可能会有很多判断逻辑的存在，这就导致代码显得很累赘，所以个人更喜欢使用匿名内部类来完成一些简便的操作，配合lambda 表达式，代码会更便于阅读 如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.setOnClickListener(v -&gt; gotoVipOpenWeb());</span><br></pre></td></tr></table></figure><h2 id="内部类与外部类的关系"><a href="#内部类与外部类的关系" class="headerlink" title="内部类与外部类的关系"></a>内部类与外部类的关系</h2><ol><li><p>对于非静态内部类，内部类的创建依赖外部类的实例对象，在没有外部类实例之前是无法创建内部类的</p></li><li><p>内部类是一个相对独立的实体，与外部类不是is-a关系</p></li><li><p>创建内部类的时刻并不依赖于外部类的创建 </p></li></ol><h3 id="创建内部类的时刻并不依赖于外部类的创建"><a href="#创建内部类的时刻并不依赖于外部类的创建" class="headerlink" title="创建内部类的时刻并不依赖于外部类的创建"></a>创建内部类的时刻并不依赖于外部类的创建</h3><p>这句话是《Thinking In Java》中的一句话，大部分人看到这里会断章取义的认为 内部类的创建不依赖于外部类的创建，这种理解是错误的，去掉时刻二字这句话就会变了一个味道。</p><p>事实上静态内部类「嵌套类」的确不依赖于外部类的创建，因为 static 并不依赖于实例，而依赖于类 Class 本身。</p><p>但是对于普通的内部类，其必须依赖于外部类实例创建正如第一条关系所说：对于非静态内部类，内部类的创建依赖外部类的实例对象，在没有外部类实例之前是无法创建内部类的。</p><p>对于普通内部类创建方法有两种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ClassOuter &#123;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class InnerClass&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TestInnerClass &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建方式1</span><br><span class="line">        ClassOuter.InnerClass innerClass = new ClassOuter().new InnerClass();</span><br><span class="line">        //创建方式2</span><br><span class="line">        ClassOuter outer = new ClassOuter();</span><br><span class="line">        ClassOuter.InnerClass inner = outer.new InnerClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是：正式由于这种依赖关系，所以普通内部类中不允许有 static 成员，包括嵌套类（内部类的静态内部类） ，道理显然而知：static 本身是针对类本身来说的。又由于非static内部类总是由一个外部的对象生成，既然与对象相关，就没有静态的字段和方法。当然静态内部类不依赖于外部类，所以其内允许有 static 成员。</p><p>现在返回头来看标题，其实英文版中这句话是这样描述的：</p><blockquote><p>The point of creation of the inner-class objects not tied to the creation of the outer-class object.</p></blockquote><p>个人认为这句话理解为:创建一个外部类的时候不一定要创建这个内部类。</p><p>拿文章开头的 Adapter 的例子来说，我们不能说创建了 Activity 就一定会创建 Adapter （假设 Adapter 创建依赖于某个条件的成立）。只有当满足条件的时候才会被创建。</p><h3 id="内部类是一个相对独立的实体，与外部类不是is-a关系"><a href="#内部类是一个相对独立的实体，与外部类不是is-a关系" class="headerlink" title="内部类是一个相对独立的实体，与外部类不是is-a关系"></a>内部类是一个相对独立的实体，与外部类不是is-a关系</h3><p>首先理解什么是「is-a关系」：is-a关系是指继承关系。知道什么是is-a关系后相信，内部类和外部类不是is-a关系就很容易理解了。</p><p>而对于内部类是一个相对独立的实体，我们可以从两个方面来理解这句话：</p><blockquote><p>一个外部类可以拥有多个内部类对象，而他们之间没有任何关系，是独立的个体。</p></blockquote><p>从编译结果来看，内部类被表现为 「外部类$内部类.class 」，所以对于虚拟机来说他个一个单独的类来说没什么区别。但是我们知道他们是有关系的，因为内部类默认持有一个外部类的引用。</p><h2 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h2><p>内部类可以分为：静态内部类（嵌套类）和非静态内部类。非静态内部类又可以分为：成员内部类、方法内部类、匿名内部类。对于这几种类的书写相信大家早已熟练，所以本节主要说明的是这几种类之间的区别：</p><p>静态内部类和非静态内部类的区别</p><ul><li><p>静态内部类可以有静态成员，而非静态内部类则不能有静态成员。</p></li><li><p>静态内部类可以访问外部类的静态变量，而不可访问外部类的非静态变量；</p></li><li><p>非静态内部类的非静态成员可以访问外部类的非静态变量。</p></li><li><p>静态内部类的创建不依赖于外部类，而非静态内部类必须依赖于外部类的创建而创建。</p></li></ul><p>我们通过一个例子就可以很好的理解这几点区别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class ClassOuter &#123;</span><br><span class="line">    private int noStaticInt = 1;</span><br><span class="line">    private static int STATIC_INT = 2;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">fun</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class InnerClass &#123;</span><br><span class="line">        //static int num = 1; 此时编辑器会报错 非静态内部类则不能有静态成员</span><br><span class="line">        public void <span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">            //非静态内部类的非静态成员可以访问外部类的非静态变量。</span><br><span class="line">            System.out.println(STATIC_INT);</span><br><span class="line">            System.out.println(noStaticInt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class StaticInnerClass &#123;</span><br><span class="line">        static int NUM = 1;//静态内部类可以有静态成员</span><br><span class="line">        public void <span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">            System.out.println(STATIC_INT);</span><br><span class="line">            //System.out.println(noStaticInt); 此时编辑器会报 不可访问外部类的非静态变量错</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TestInnerClass &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //非静态内部类 创建方式1</span><br><span class="line">        ClassOuter.InnerClass innerClass = new ClassOuter().new InnerClass();</span><br><span class="line">        //非静态内部类 创建方式2</span><br><span class="line">        ClassOuter outer = new ClassOuter();</span><br><span class="line">        ClassOuter.InnerClass inner = outer.new InnerClass();</span><br><span class="line">        //静态内部类的创建方式</span><br><span class="line">        ClassOuter.StaticInnerClass staticInnerClass = new ClassOuter.StaticInnerClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>如果一个内部类只在一个方法中使用到了，那么我们可以将这个类定义在方法内部，这种内部类被称为局部内部类。其作用域仅限于该方法。</p><p>局部内部类有两点值得我们注意的地方：</p><ol><li><p>局部内类不允许使用访问权限修饰符 public private protected 均不允许</p></li><li><p>局部内部类对外完全隐藏，除了创建这个类的方法可以访问它其他的地方是不允许访问的。</p></li></ol><p>局部内部类与成员内部类不同之处是他可以引用成员变量，但该成员必须声明为 final，并内部不允许修改该变量的值。（这句话并不准确，因为如果不是基本数据类型的时候，只是不允许修改引用指向的对象，而对象本身是可以被就修改的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class ClassOuter &#123;</span><br><span class="line">    private int noStaticInt = 1;</span><br><span class="line">    private static int STATIC_INT = 2;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">fun</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">testFunctionClass</span></span>()&#123;</span><br><span class="line">        class FunctionClass&#123;</span><br><span class="line">            private void <span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">                System.out.println(<span class="string">"局部内部类的输出"</span>);</span><br><span class="line">                System.out.println(STATIC_INT);</span><br><span class="line">                System.out.println(noStaticInt);</span><br><span class="line">                System.out.println(params);</span><br><span class="line">                //params ++ ; // params 不可变所以这句话编译错误</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        FunctionClass functionClass = new FunctionClass();</span><br><span class="line">        functionClass.fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><ul><li><p>匿名内部类是没有访问修饰符的。</p></li><li><p>匿名内部类必须继承一个抽象类或者实现一个接口</p></li><li><p>匿名内部类中不能存在任何静态成员或方法</p></li><li><p>匿名内部类是没有构造方法的，因为它没有类名。</p></li><li><p>与局部内部相同匿名内部类也可以引用局部变量。此变量也必须声明为 final</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Button &#123;</span><br><span class="line">    public void click(final int params)&#123;</span><br><span class="line">        //匿名内部类，实现的是ActionListener接口</span><br><span class="line">        new <span class="function"><span class="title">ActionListener</span></span>()&#123;</span><br><span class="line">            public void <span class="function"><span class="title">onAction</span></span>()&#123;</span><br><span class="line">                System.out.println(<span class="string">"click action..."</span> + params);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.onAction();</span><br><span class="line">    &#125;</span><br><span class="line">    //匿名内部类必须继承或实现一个已有的接口</span><br><span class="line">    public interface ActionListener&#123;</span><br><span class="line">        public void onAction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Button button=new Button();</span><br><span class="line">        button.click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么局部变量需要final修饰呢"><a href="#为什么局部变量需要final修饰呢" class="headerlink" title="为什么局部变量需要final修饰呢"></a>为什么局部变量需要final修饰呢</h3><p><strong>原因是：因为局部变量和匿名内部类的生命周期不同。</strong></p><p>匿名内部类是创建后是存储在堆中的，而方法中的局部变量是存储在Java栈中，当方法执行完毕后，就进行退栈，同时局部变量也会消失。那么此时匿名内部类还有可能在堆中存储着，那么匿名内部类要到哪里去找这个局部变量呢？</p><p>为了解决这个问题编译器为自动地帮我们在匿名内部类中创建了一个局部变量的备份，也就是说即使方法执行结束，匿名内部类中还有一个备份，自然就不怕找不到了。</p><p>但是问题又来了。如果局部变量中的a不停的在变化。那么岂不是也要让备份的a变量无时无刻的变化。为了保持局部变量与匿名内部类中备份域保持一致。编译器不得不规定死这些局部域必须是常量，一旦赋值不能再发生变化了。所以为什么匿名内部类应用外部方法的域必须是常量域的原因所在了。</p><p>特别注意：<strong>在Java8中已经去掉要对final的修饰限制，但其实只要在匿名内部类使用了，该变量还是会自动变为final类型（只能使用，不能赋值）。</strong></p><h2 id="实际开发中内部类有可能会引起的问题"><a href="#实际开发中内部类有可能会引起的问题" class="headerlink" title="实际开发中内部类有可能会引起的问题"></a>实际开发中内部类有可能会引起的问题</h2><h3 id="内部类会造成程序的内存泄漏"><a href="#内部类会造成程序的内存泄漏" class="headerlink" title="内部类会造成程序的内存泄漏"></a>内部类会造成程序的内存泄漏</h3><p>相信做 Android 的朋友看到这个例子一定不会陌生，我们经常使用的 Handler 就无时无刻不给我们提示着这样的警告。我们先来看下内部类为什么会造成内存泄漏。</p><p>要想了解为啥内部类为什么会造成内存泄漏我们就必须了解 java 虚拟机的回收机制，但是我们这里不会详尽的介绍 java 的内存回收机制，我们只需要了解 java 的内存回收机制通过「可达性分析」来实现的。即 java 虚拟机会通过内存回收机制来判定引用是否可达，如果不可达就会在某些时刻去回收这些引用。</p><p>那么内部类在什么情况下会造成内存泄漏的可能呢？</p><ol><li><p>如果一个匿名内部类没有被任何引用持有，那么匿名内部类对象用完就有机会被回收。</p></li><li><p>如果内部类仅仅只是在外部类中被引用，当外部类的不再被引用时，外部类和内部类就可以都被GC回收。</p></li><li><p>如果当内部类的引用被外部类以外的其他类引用时，就会造成内部类和外部类无法被GC回收的情况，即使外部类没有被引用，因为内部类持有指向外部类的引用）。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class ClassOuter &#123;</span><br><span class="line"></span><br><span class="line">    Object object = new <span class="function"><span class="title">Object</span></span>() &#123;</span><br><span class="line">        public void <span class="function"><span class="title">finalize</span></span>() &#123;</span><br><span class="line">            System.out.println(<span class="string">"inner Free the occupied memory..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">finalize</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Outer Free the occupied memory..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TestInnerClass &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Test();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void Test() throws InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">"Start of program."</span>);</span><br><span class="line"></span><br><span class="line">        ClassOuter outer = new ClassOuter();</span><br><span class="line">        Object object = outer.object;</span><br><span class="line">        outer = null;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Execute GC"</span>);</span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(3000);</span><br><span class="line">        System.out.println(<span class="string">"End of program."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序发现 执行内存回收并没回收 object 对象，这是因为即使外部类没有被任何变量引用，只要其内部类被外部类以外的变量持有，外部类就不会被GC回收。我们要尤其注意内部类被外面其他类引用的情况，这点导致外部类无法被释放，极容易导致内存泄漏。</p><p>在Android 中 Hanlder 作为内部类使用的时候其对象被系统主线程的 Looper 持有（当然这里也可是子线程手动创建的 Looper）掌管的消息队列 MessageQueue 中的 Hanlder 发送的 Message 持有，当消息队列中有大量消息处理的需要处理，或者延迟消息需要执行的时候，创建该 Handler 的 Activity 已经退出了，Activity 对象也无法被释放，这就造成了内存泄漏。</p><p>那么 Hanlder 何时会被释放，当消息队列处理完 Hanlder 携带的 message 的时候就会调用 msg.recycleUnchecked()释放Message所持有的Handler引用。</p><p><strong>在 Android 中要想处理 Hanlder 内存泄漏可以从两个方面着手：</strong></p><ol><li>在关闭Activity/Fragment 的 onDestry，取消还在排队的Message:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mHandler.removeCallbacksAndMessages(null);</span><br></pre></td></tr></table></figure></li><li>将 Hanlder 创建为静态内部类并采用软引用方式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private static class MyHandler extends Handler &#123;</span><br><span class="line"></span><br><span class="line">        private final WeakReference&lt;MainActivity&gt; mActivity;</span><br><span class="line"></span><br><span class="line">        public MyHandler(MainActivity activity) &#123;</span><br><span class="line">            mActivity = new WeakReference&lt;MainActivity&gt;(activity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msg) &#123;</span><br><span class="line">            MainActivity activity = mActivity.get();</span><br><span class="line">            <span class="keyword">if</span> (activity == null || activity.isFinishing()) &#123;</span><br><span class="line">               <span class="built_in">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            // ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文从内部类的存在理由，内部类与外部类的关系，内部类分类以及开发中内部类可能造成的内存泄漏的问题上，总结了与内部类相关的问题，原谅本人才疏学浅，本文之前想要使用「彻底搞懂 java 内部类」但是当我写完整片文章，我才发现，通过 java 内部类可能会延伸出各种各样的知识，所以最终去掉了彻底二字，总结可能有很多不到位的地方。还望能够及时帮我指出。</p><p>其中内部类分类，静态内部类和非静态内部类，以及局部内部类和匿名内部的共同点和区别点很可能被面试问到，如果能因此延伸到内部类造成的内存泄漏问题上，想必也是个加分项。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>本文参考 《Thinking in java》，《Java 核心技术 卷1》<br><a href="http://blog.csdn.net/mcryeasy/article/details/54848452" target="_blank" rel="noopener">http://blog.csdn.net/mcryeasy/article/details/54848452</a><br><a href="http://blog.csdn.net/mcryeasy/article/details/53149594" target="_blank" rel="noopener">http://blog.csdn.net/mcryeasy/article/details/53149594</a><br><a href="https://www.zhihu.com/question/21373020" target="_blank" rel="noopener">https://www.zhihu.com/question/21373020</a><br><a href="https://daiguahub.com/" target="_blank" rel="noopener">https://daiguahub.com/</a><br><a href="https://www.zhihu.com/question/20969764" target="_blank" rel="noopener">https://www.zhihu.com/question/20969764</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文将会从以下几部分来总结：&lt;/strong&gt;   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;为什么要存在内部类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内部类与外部类的关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内部的分类及几种分类的详细使用注意事项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实际开发中会遇到内部类的问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://yzcgsss.github.io/tags/java/"/>
    
      <category term="git" scheme="https://yzcgsss.github.io/tags/git/"/>
    
      <category term="随笔" scheme="https://yzcgsss.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>这一篇让你彻底搞懂Java内部类</title>
    <link href="https://yzcgsss.github.io/2020/01/14/%E8%BF%99%E4%B8%80%E7%AF%87%E8%AE%A9%E4%BD%A0%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82Java%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>https://yzcgsss.github.io/2020/01/14/%E8%BF%99%E4%B8%80%E7%AF%87%E8%AE%A9%E4%BD%A0%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82Java%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2020-01-14T14:43:11.806Z</published>
    <updated>2020-01-15T14:42:42.363Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本文将会从以下几部分来总结：</strong>   </p><ol><li><p>为什么要存在内部类</p></li><li><p>内部类与外部类的关系</p></li><li><p>内部的分类及几种分类的详细使用注意事项</p></li><li><p>实际开发中会遇到内部类的问题</p></li></ol><a id="more"></a><p><img src="/.io//biubiubiu.gif" alt><br>插入图片</p><h2 id="内部类为什么存在"><a href="#内部类为什么存在" class="headerlink" title="内部类为什么存在"></a>内部类为什么存在</h2><blockquote><p>内部类(inner class)：定义在另一个类中的类   </p></blockquote><p><strong>我们为什么需要内部类？或者说内部类为啥要存在？其主要原因有如下几点：</strong></p><p>内部类方法可以访问该类定义所在作用域中的数据，包括被 private 修饰的私有数据</p><p>内部类可以对同一包中的其他类隐藏起来</p><p>内部类可以实现 java 单继承的缺陷</p><p>当我们想要定义一个回调函数却不想写大量代码的时候我们可以选择使用匿名内部类来实现</p><h2 id="内部类方法可以访问该类定义所在作用域中的数据"><a href="#内部类方法可以访问该类定义所在作用域中的数据" class="headerlink" title="内部类方法可以访问该类定义所在作用域中的数据"></a>内部类方法可以访问该类定义所在作用域中的数据</h2><p>做 Android 的话有时候会将各种 Adapter 直接写在 Activity 中，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class MainActivity extends AppCompatActivity&#123;</span><br><span class="line">    ....</span><br><span class="line">    private List&lt;Fragment&gt; fragments = new ArrayList();</span><br><span class="line"></span><br><span class="line">    private class BottomPagerAdapter extends FragmentPagerAdapter&#123;</span><br><span class="line">        ....</span><br><span class="line">        @Override  </span><br><span class="line">        public Fragment getItem(int position) &#123;</span><br><span class="line">            <span class="built_in">return</span> fragments.get(position);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文中 BottomPagerAdapter 便是 MainActivity 的一个内部类。也可以看出 BottomPagerAdapter 可以直接访问 MainActivity 中定义的 fragments 私有变量。如果将 BottomPagerAdapter 不定义为内部类访问 fragments 私有变量 没有 getXXX 方法是做不到的。这就是内部类的第一点好处。</p><p><strong>可是为什么内部类就可以随意访问外部类的成员呢？是如何做到的呢？</strong></p><p>当外部类的对象创建了一个内部类的对象时，内部类对象必定会秘密捕获一个指向外部类对象的引用，然后访问外部类的成员时，就是用那个引用来选择外围类的成员的。当然这些编辑器已经帮我们处理了。</p><p>另外注意内部类只是一种编译器现象，与虚拟机无关。编译器会将内部类编译成 外部类名$内部类名 的常规文件，虚拟机对此一无所知。</p><h2 id="内部类可以对同一包中的其他类隐藏起来"><a href="#内部类可以对同一包中的其他类隐藏起来" class="headerlink" title="内部类可以对同一包中的其他类隐藏起来"></a>内部类可以对同一包中的其他类隐藏起来</h2><p>关于内部类的第二个好处其实很显而易见，我们都知道外部类即普通的类不能使用 private protected 访问权限符来修饰的，而内部类则可以使用 private 和 protected 来修饰。当我们使用 private 来修饰内部类的时候这个类就对外隐藏了。</p><p>这看起来没什么作用，但是当内部类实现某个接口的时候，在进行向上转型，对外部来说，就完全隐藏了接口的实现了。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public interface Incrementable&#123;</span><br><span class="line">  void increment();</span><br><span class="line">&#125;</span><br><span class="line">//具体类</span><br><span class="line">public class Example &#123;</span><br><span class="line"></span><br><span class="line">    private class InsideClass implements InterfaceTest&#123;</span><br><span class="line">         public void <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">             System.out.println(<span class="string">"这是一个测试"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public InterfaceTest <span class="function"><span class="title">getIn</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> new InsideClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TestExample &#123;</span><br><span class="line"></span><br><span class="line"> public static void main(String args[])&#123;</span><br><span class="line">    Example a=new Example();</span><br><span class="line">    InterfaceTest a1=a.getIn();</span><br><span class="line">    a1.test();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这段代码里面我只知道Example的getIn()方法能返回一个InterfaceTest实例但我并不知道这个实例是这么实现的。而且由于InsideClass是private的，所以我们如果不看代码的话根本看不到这个具体类的名字，所以说它可以很好的实现隐藏。</p><h2 id="内部类可以实现-java-单继承的缺陷"><a href="#内部类可以实现-java-单继承的缺陷" class="headerlink" title="内部类可以实现 java 单继承的缺陷"></a>内部类可以实现 java 单继承的缺陷</h2><p>我们知道 java 是不允许使用 extends 去继承多个类的。内部类的引入可以很好的解决这个事情。</p><p>以下引用 《Thinking In Java》中的一段话：</p><blockquote><p>每个内部类都可以独立的继承自一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类没有影响<br>如果没有内部类提供的、可以继承多个具体的或抽象的类的能力，一些设计与编程问题就难以解决。<br>接口解决了部分问题，一个类可以实现多个接口，内部类允许继承多个非接口类型（类或抽象类）。</p></blockquote><p>我的理解 Java只能继承一个类这个学过基本语法的人都知道，而在有内部类之前它的多重继承方式是用接口来实现的。但使用接口有时候有很多不方便的地方。比如我们实现一个接口就必须实现它里面的所有方法。而有了内部类就不一样了。它可以使我们的类继承多个具体类或抽象类。如下面这个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//类一</span><br><span class="line">public class ClassA &#123;</span><br><span class="line">   public String <span class="function"><span class="title">name</span></span>()&#123;</span><br><span class="line">       <span class="built_in">return</span> <span class="string">"liutao"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   public String <span class="function"><span class="title">doSomeThing</span></span>()&#123;</span><br><span class="line">    // doSomeThing</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">//类二</span><br><span class="line">public class ClassB &#123;</span><br><span class="line">    public int <span class="function"><span class="title">age</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> 25;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//类三</span><br><span class="line">public class MainExample&#123;</span><br><span class="line">   private class Test1 extends ClassA&#123;</span><br><span class="line">        public String <span class="function"><span class="title">name</span></span>()&#123;</span><br><span class="line">          <span class="built_in">return</span> super.name();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private class Test2 extends ClassB&#123;</span><br><span class="line">       public int <span class="function"><span class="title">age</span></span>()&#123;</span><br><span class="line">         <span class="built_in">return</span> super.age();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   public String <span class="function"><span class="title">name</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> new Test1().name();</span><br><span class="line">   &#125;</span><br><span class="line">   public int <span class="function"><span class="title">age</span></span>()&#123;</span><br><span class="line">       <span class="built_in">return</span> new Test2().age();</span><br><span class="line">   &#125;</span><br><span class="line">   public static void main(String args[])&#123;</span><br><span class="line">       MainExample mi=new MainExample();</span><br><span class="line">       System.out.println(<span class="string">"姓名:"</span>+mi.name());</span><br><span class="line">       System.out.println(<span class="string">"年龄:"</span>+mi.age());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边这个例子可以看出来，MainExample 类通过内部类拥有了 ClassA 和 ClassB 的两个类的继承关系。而无需关注 ClassA 中的 doSomeThing 方法的实现。这就是比接口实现更有戏的地方。</p><h2 id="通过匿名内部类来”优化”简单的接口实现"><a href="#通过匿名内部类来”优化”简单的接口实现" class="headerlink" title="通过匿名内部类来”优化”简单的接口实现"></a>通过匿名内部类来”优化”简单的接口实现</h2><p>关于匿名内部类相信大家都不陌生，我们常见的点击事件的写法就是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">   view.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>()&#123;</span><br><span class="line">       @Override</span><br><span class="line">       public void <span class="function"><span class="title">onClick</span></span>()&#123;</span><br><span class="line">           // ... <span class="keyword">do</span> XXX...</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p>为什么标题优化带了””,其实在 Java8 引入 lambda 表达式之前我个人是比较讨厌这种写法的，因为 onClick 方法中的内容可能很复杂，可能会有很多判断逻辑的存在，这就导致代码显得很累赘，所以个人更喜欢使用匿名内部类来完成一些简便的操作，配合lambda 表达式，代码会更便于阅读 如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.setOnClickListener(v -&gt; gotoVipOpenWeb());</span><br></pre></td></tr></table></figure><h2 id="内部类与外部类的关系"><a href="#内部类与外部类的关系" class="headerlink" title="内部类与外部类的关系"></a>内部类与外部类的关系</h2><ol><li><p>对于非静态内部类，内部类的创建依赖外部类的实例对象，在没有外部类实例之前是无法创建内部类的</p></li><li><p>内部类是一个相对独立的实体，与外部类不是is-a关系</p></li><li><p>创建内部类的时刻并不依赖于外部类的创建 </p></li></ol><h3 id="创建内部类的时刻并不依赖于外部类的创建"><a href="#创建内部类的时刻并不依赖于外部类的创建" class="headerlink" title="创建内部类的时刻并不依赖于外部类的创建"></a>创建内部类的时刻并不依赖于外部类的创建</h3><p>这句话是《Thinking In Java》中的一句话，大部分人看到这里会断章取义的认为 内部类的创建不依赖于外部类的创建，这种理解是错误的，去掉时刻二字这句话就会变了一个味道。</p><p>事实上静态内部类「嵌套类」的确不依赖于外部类的创建，因为 static 并不依赖于实例，而依赖于类 Class 本身。</p><p>但是对于普通的内部类，其必须依赖于外部类实例创建正如第一条关系所说：对于非静态内部类，内部类的创建依赖外部类的实例对象，在没有外部类实例之前是无法创建内部类的。</p><p>对于普通内部类创建方法有两种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ClassOuter &#123;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class InnerClass&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TestInnerClass &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建方式1</span><br><span class="line">        ClassOuter.InnerClass innerClass = new ClassOuter().new InnerClass();</span><br><span class="line">        //创建方式2</span><br><span class="line">        ClassOuter outer = new ClassOuter();</span><br><span class="line">        ClassOuter.InnerClass inner = outer.new InnerClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是：正式由于这种依赖关系，所以普通内部类中不允许有 static 成员，包括嵌套类（内部类的静态内部类） ，道理显然而知：static 本身是针对类本身来说的。又由于非static内部类总是由一个外部的对象生成，既然与对象相关，就没有静态的字段和方法。当然静态内部类不依赖于外部类，所以其内允许有 static 成员。</p><p>现在返回头来看标题，其实英文版中这句话是这样描述的：</p><blockquote><p>The point of creation of the inner-class objects not tied to the creation of the outer-class object.</p></blockquote><p>个人认为这句话理解为:创建一个外部类的时候不一定要创建这个内部类。</p><p>拿文章开头的 Adapter 的例子来说，我们不能说创建了 Activity 就一定会创建 Adapter （假设 Adapter 创建依赖于某个条件的成立）。只有当满足条件的时候才会被创建。</p><h3 id="内部类是一个相对独立的实体，与外部类不是is-a关系"><a href="#内部类是一个相对独立的实体，与外部类不是is-a关系" class="headerlink" title="内部类是一个相对独立的实体，与外部类不是is-a关系"></a>内部类是一个相对独立的实体，与外部类不是is-a关系</h3><p>首先理解什么是「is-a关系」：is-a关系是指继承关系。知道什么是is-a关系后相信，内部类和外部类不是is-a关系就很容易理解了。</p><p>而对于内部类是一个相对独立的实体，我们可以从两个方面来理解这句话：</p><blockquote><p>一个外部类可以拥有多个内部类对象，而他们之间没有任何关系，是独立的个体。</p></blockquote><p>从编译结果来看，内部类被表现为 「外部类$内部类.class 」，所以对于虚拟机来说他个一个单独的类来说没什么区别。但是我们知道他们是有关系的，因为内部类默认持有一个外部类的引用。</p><h2 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h2><p>内部类可以分为：静态内部类（嵌套类）和非静态内部类。非静态内部类又可以分为：成员内部类、方法内部类、匿名内部类。对于这几种类的书写相信大家早已熟练，所以本节主要说明的是这几种类之间的区别：</p><p>静态内部类和非静态内部类的区别</p><ul><li><p>静态内部类可以有静态成员，而非静态内部类则不能有静态成员。</p></li><li><p>静态内部类可以访问外部类的静态变量，而不可访问外部类的非静态变量；</p></li><li><p>非静态内部类的非静态成员可以访问外部类的非静态变量。</p></li><li><p>静态内部类的创建不依赖于外部类，而非静态内部类必须依赖于外部类的创建而创建。</p></li></ul><p>我们通过一个例子就可以很好的理解这几点区别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class ClassOuter &#123;</span><br><span class="line">    private int noStaticInt = 1;</span><br><span class="line">    private static int STATIC_INT = 2;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">fun</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class InnerClass &#123;</span><br><span class="line">        //static int num = 1; 此时编辑器会报错 非静态内部类则不能有静态成员</span><br><span class="line">        public void <span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">            //非静态内部类的非静态成员可以访问外部类的非静态变量。</span><br><span class="line">            System.out.println(STATIC_INT);</span><br><span class="line">            System.out.println(noStaticInt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class StaticInnerClass &#123;</span><br><span class="line">        static int NUM = 1;//静态内部类可以有静态成员</span><br><span class="line">        public void <span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">            System.out.println(STATIC_INT);</span><br><span class="line">            //System.out.println(noStaticInt); 此时编辑器会报 不可访问外部类的非静态变量错</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TestInnerClass &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //非静态内部类 创建方式1</span><br><span class="line">        ClassOuter.InnerClass innerClass = new ClassOuter().new InnerClass();</span><br><span class="line">        //非静态内部类 创建方式2</span><br><span class="line">        ClassOuter outer = new ClassOuter();</span><br><span class="line">        ClassOuter.InnerClass inner = outer.new InnerClass();</span><br><span class="line">        //静态内部类的创建方式</span><br><span class="line">        ClassOuter.StaticInnerClass staticInnerClass = new ClassOuter.StaticInnerClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>如果一个内部类只在一个方法中使用到了，那么我们可以将这个类定义在方法内部，这种内部类被称为局部内部类。其作用域仅限于该方法。</p><p>局部内部类有两点值得我们注意的地方：</p><ol><li><p>局部内类不允许使用访问权限修饰符 public private protected 均不允许</p></li><li><p>局部内部类对外完全隐藏，除了创建这个类的方法可以访问它其他的地方是不允许访问的。</p></li></ol><p>局部内部类与成员内部类不同之处是他可以引用成员变量，但该成员必须声明为 final，并内部不允许修改该变量的值。（这句话并不准确，因为如果不是基本数据类型的时候，只是不允许修改引用指向的对象，而对象本身是可以被就修改的）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class ClassOuter &#123;</span><br><span class="line">    private int noStaticInt = 1;</span><br><span class="line">    private static int STATIC_INT = 2;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">fun</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">testFunctionClass</span></span>()&#123;</span><br><span class="line">        class FunctionClass&#123;</span><br><span class="line">            private void <span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line">                System.out.println(<span class="string">"局部内部类的输出"</span>);</span><br><span class="line">                System.out.println(STATIC_INT);</span><br><span class="line">                System.out.println(noStaticInt);</span><br><span class="line">                System.out.println(params);</span><br><span class="line">                //params ++ ; // params 不可变所以这句话编译错误</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        FunctionClass functionClass = new FunctionClass();</span><br><span class="line">        functionClass.fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><ul><li><p>匿名内部类是没有访问修饰符的。</p></li><li><p>匿名内部类必须继承一个抽象类或者实现一个接口</p></li><li><p>匿名内部类中不能存在任何静态成员或方法</p></li><li><p>匿名内部类是没有构造方法的，因为它没有类名。</p></li><li><p>与局部内部相同匿名内部类也可以引用局部变量。此变量也必须声明为 final</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Button &#123;</span><br><span class="line">    public void click(final int params)&#123;</span><br><span class="line">        //匿名内部类，实现的是ActionListener接口</span><br><span class="line">        new <span class="function"><span class="title">ActionListener</span></span>()&#123;</span><br><span class="line">            public void <span class="function"><span class="title">onAction</span></span>()&#123;</span><br><span class="line">                System.out.println(<span class="string">"click action..."</span> + params);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.onAction();</span><br><span class="line">    &#125;</span><br><span class="line">    //匿名内部类必须继承或实现一个已有的接口</span><br><span class="line">    public interface ActionListener&#123;</span><br><span class="line">        public void onAction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Button button=new Button();</span><br><span class="line">        button.click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么局部变量需要final修饰呢"><a href="#为什么局部变量需要final修饰呢" class="headerlink" title="为什么局部变量需要final修饰呢"></a>为什么局部变量需要final修饰呢</h3><p><strong>原因是：因为局部变量和匿名内部类的生命周期不同。</strong></p><p>匿名内部类是创建后是存储在堆中的，而方法中的局部变量是存储在Java栈中，当方法执行完毕后，就进行退栈，同时局部变量也会消失。那么此时匿名内部类还有可能在堆中存储着，那么匿名内部类要到哪里去找这个局部变量呢？</p><p>为了解决这个问题编译器为自动地帮我们在匿名内部类中创建了一个局部变量的备份，也就是说即使方法执行结束，匿名内部类中还有一个备份，自然就不怕找不到了。</p><p>但是问题又来了。如果局部变量中的a不停的在变化。那么岂不是也要让备份的a变量无时无刻的变化。为了保持局部变量与匿名内部类中备份域保持一致。编译器不得不规定死这些局部域必须是常量，一旦赋值不能再发生变化了。所以为什么匿名内部类应用外部方法的域必须是常量域的原因所在了。</p><p>特别注意：<strong>在Java8中已经去掉要对final的修饰限制，但其实只要在匿名内部类使用了，该变量还是会自动变为final类型（只能使用，不能赋值）。</strong></p><h2 id="实际开发中内部类有可能会引起的问题"><a href="#实际开发中内部类有可能会引起的问题" class="headerlink" title="实际开发中内部类有可能会引起的问题"></a>实际开发中内部类有可能会引起的问题</h2><h3 id="内部类会造成程序的内存泄漏"><a href="#内部类会造成程序的内存泄漏" class="headerlink" title="内部类会造成程序的内存泄漏"></a>内部类会造成程序的内存泄漏</h3><p>相信做 Android 的朋友看到这个例子一定不会陌生，我们经常使用的 Handler 就无时无刻不给我们提示着这样的警告。我们先来看下内部类为什么会造成内存泄漏。</p><p>要想了解为啥内部类为什么会造成内存泄漏我们就必须了解 java 虚拟机的回收机制，但是我们这里不会详尽的介绍 java 的内存回收机制，我们只需要了解 java 的内存回收机制通过「可达性分析」来实现的。即 java 虚拟机会通过内存回收机制来判定引用是否可达，如果不可达就会在某些时刻去回收这些引用。</p><p>那么内部类在什么情况下会造成内存泄漏的可能呢？</p><ol><li><p>如果一个匿名内部类没有被任何引用持有，那么匿名内部类对象用完就有机会被回收。</p></li><li><p>如果内部类仅仅只是在外部类中被引用，当外部类的不再被引用时，外部类和内部类就可以都被GC回收。</p></li><li><p>如果当内部类的引用被外部类以外的其他类引用时，就会造成内部类和外部类无法被GC回收的情况，即使外部类没有被引用，因为内部类持有指向外部类的引用）。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class ClassOuter &#123;</span><br><span class="line"></span><br><span class="line">    Object object = new <span class="function"><span class="title">Object</span></span>() &#123;</span><br><span class="line">        public void <span class="function"><span class="title">finalize</span></span>() &#123;</span><br><span class="line">            System.out.println(<span class="string">"inner Free the occupied memory..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">finalize</span></span>() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Outer Free the occupied memory..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TestInnerClass &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Test();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void Test() throws InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">"Start of program."</span>);</span><br><span class="line"></span><br><span class="line">        ClassOuter outer = new ClassOuter();</span><br><span class="line">        Object object = outer.object;</span><br><span class="line">        outer = null;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Execute GC"</span>);</span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(3000);</span><br><span class="line">        System.out.println(<span class="string">"End of program."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序发现 执行内存回收并没回收 object 对象，这是因为即使外部类没有被任何变量引用，只要其内部类被外部类以外的变量持有，外部类就不会被GC回收。我们要尤其注意内部类被外面其他类引用的情况，这点导致外部类无法被释放，极容易导致内存泄漏。</p><p>在Android 中 Hanlder 作为内部类使用的时候其对象被系统主线程的 Looper 持有（当然这里也可是子线程手动创建的 Looper）掌管的消息队列 MessageQueue 中的 Hanlder 发送的 Message 持有，当消息队列中有大量消息处理的需要处理，或者延迟消息需要执行的时候，创建该 Handler 的 Activity 已经退出了，Activity 对象也无法被释放，这就造成了内存泄漏。</p><p>那么 Hanlder 何时会被释放，当消息队列处理完 Hanlder 携带的 message 的时候就会调用 msg.recycleUnchecked()释放Message所持有的Handler引用。</p><p><strong>在 Android 中要想处理 Hanlder 内存泄漏可以从两个方面着手：</strong></p><ol><li>在关闭Activity/Fragment 的 onDestry，取消还在排队的Message:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mHandler.removeCallbacksAndMessages(null);</span><br></pre></td></tr></table></figure></li><li>将 Hanlder 创建为静态内部类并采用软引用方式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private static class MyHandler extends Handler &#123;</span><br><span class="line"></span><br><span class="line">        private final WeakReference&lt;MainActivity&gt; mActivity;</span><br><span class="line"></span><br><span class="line">        public MyHandler(MainActivity activity) &#123;</span><br><span class="line">            mActivity = new WeakReference&lt;MainActivity&gt;(activity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msg) &#123;</span><br><span class="line">            MainActivity activity = mActivity.get();</span><br><span class="line">            <span class="keyword">if</span> (activity == null || activity.isFinishing()) &#123;</span><br><span class="line">               <span class="built_in">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            // ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文从内部类的存在理由，内部类与外部类的关系，内部类分类以及开发中内部类可能造成的内存泄漏的问题上，总结了与内部类相关的问题，原谅本人才疏学浅，本文之前想要使用「彻底搞懂 java 内部类」但是当我写完整片文章，我才发现，通过 java 内部类可能会延伸出各种各样的知识，所以最终去掉了彻底二字，总结可能有很多不到位的地方。还望能够及时帮我指出。</p><p>其中内部类分类，静态内部类和非静态内部类，以及局部内部类和匿名内部的共同点和区别点很可能被面试问到，如果能因此延伸到内部类造成的内存泄漏问题上，想必也是个加分项。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>本文参考 《Thinking in java》，《Java 核心技术 卷1》<br><a href="http://blog.csdn.net/mcryeasy/article/details/54848452" target="_blank" rel="noopener">http://blog.csdn.net/mcryeasy/article/details/54848452</a><br><a href="http://blog.csdn.net/mcryeasy/article/details/53149594" target="_blank" rel="noopener">http://blog.csdn.net/mcryeasy/article/details/53149594</a><br><a href="https://www.zhihu.com/question/21373020" target="_blank" rel="noopener">https://www.zhihu.com/question/21373020</a><br><a href="https://daiguahub.com/" target="_blank" rel="noopener">https://daiguahub.com/</a><br><a href="https://www.zhihu.com/question/20969764" target="_blank" rel="noopener">https://www.zhihu.com/question/20969764</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文将会从以下几部分来总结：&lt;/strong&gt;   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;为什么要存在内部类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内部类与外部类的关系&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内部的分类及几种分类的详细使用注意事项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实际开发中会遇到内部类的问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://yzcgsss.github.io/tags/java/"/>
    
      <category term="git" scheme="https://yzcgsss.github.io/tags/git/"/>
    
      <category term="随笔" scheme="https://yzcgsss.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yzcgsss.github.io/2020/01/14/hello-world/"/>
    <id>https://yzcgsss.github.io/2020/01/14/hello-world/</id>
    <published>2020-01-14T07:57:56.035Z</published>
    <updated>2020-01-16T01:55:04.145Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
